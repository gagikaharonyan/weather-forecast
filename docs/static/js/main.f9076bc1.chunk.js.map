{"version":3,"sources":["components/ShowForecastBtn/ShowForecastBtn.module.sass","components/UnitSwitcherBtn/UnitSwitcherBtn.module.sass","components/ForecastCard/ForecastCard.module.sass","components/CurrentConditions/CurrentConditions.module.sass","utils.ts","SiteSettingsContext.tsx","components/CurrentConditions/CurrentConditions.tsx","components/ShowForecastBtn/ShowForecastBtn.tsx","components/UnitSwitcherBtn/UnitSwitcherBtn.tsx","api.ts","hooks/useGetForecastService.ts","components/ForecastCard/ForecastCard.tsx","components/Forecast/Forecast.tsx","App.tsx","serviceWorker.ts","index.tsx","components/Forecast/Forecast.module.sass"],"names":["module","exports","getImageFromNumber","iconNumber","dateFormatConverter","date","Date","toString","SiteSettingsContext","createContext","unit","setUnit","SiteSettingsProvider","props","useState","_unit","_setUnit","Provider","value","children","CurrentConditons","location","dateTime","weatherIcon","temp","weatherText","settings","useContext","className","styles","root","style","margin","getDate","weather","icon","src","getImage","alt","ShowForecastBtn","onClick","isClicked","UnitSwitcherBtn","prev","axios","_axios","create","baseURL","timeout","KEY","useGetForecastService","status","payload","result","setResult","useEffect","onsuccess","get","params","apikey","language","details","metric","then","res","data","getForecast","ForecastCard","minTemp","maxTemp","dayIcon","nightIcon","slice","cols","col","Forecast","service","Headline","Text","forecastList","DailyForecasts","map","forecast","i","key","Temperature","Minimum","Value","Maximum","Unit","Night","Icon","Day","App","isShowForcastClicked","setIsShowForcastClicked","isLoaded","currentCondition","setCurrentCondition","LocalObservationDateTime","WeatherIcon","C","Metric","F","Imperial","WeatherText","prevState","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f9076bc1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"ShowForecastBtn_root__2bLsm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"UnitSwitcherBtn_root__2yBt3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"ForecastCard_root__3KQqi\",\"cols\":\"ForecastCard_cols__3tvyt\",\"col\":\"ForecastCard_col__1R6IZ\",\"weatherIcon\":\"ForecastCard_weatherIcon__WgCE3\",\"temp\":\"ForecastCard_temp__1ycGi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"CurrentConditions_root__EE9Kg\",\"location\":\"CurrentConditions_location__2vKV0\",\"weather\":\"CurrentConditions_weather__3U6Yy\",\"icon\":\"CurrentConditions_icon__1MmRe\",\"temp\":\"CurrentConditions_temp__1g-s2\",\"weatherText\":\"CurrentConditions_weatherText__2Khg6\"};","export function getImageFromNumber(iconNumber: number): string {\r\n  if (iconNumber < 6) {\r\n    return \"https://www.flaticon.com/svg/static/icons/svg/869/869869.svg\";\r\n  }\r\n  if (iconNumber > 5 && iconNumber < 29) {\r\n    return \"https://www.flaticon.com/svg/static/icons/svg/925/925647.svg\";\r\n  }\r\n  if (iconNumber > 32 && iconNumber < 38) {\r\n    return \"https://www.flaticon.com/premium-icon/icons/svg/2987/2987960.svg\";\r\n  }\r\n  if (iconNumber > 37) {\r\n    return \"https://www.flaticon.com/premium-icon/icons/svg/1207/1207640.svg\";\r\n  }\r\n\r\n  return \"https://www.flaticon.com/svg/static/icons/svg/990/990388.svg\";\r\n}\r\n\r\nexport function dateFormatConverter(date: string): string {\r\n  return new Date(date).toString();\r\n}\r\n\r\nexport function isDevelopment(): boolean {\r\n  return process.env.NODE_ENV === 'development';\r\n}\r\n","import React, {useState,createContext} from 'react';\r\n\r\ntype ContextType = {\r\n    unit: 'C' | 'F',\r\n    setUnit: React.Dispatch<React.SetStateAction<string>>\r\n}\r\n    \r\nexport const SiteSettingsContext = createContext<ContextType>({unit: 'C', setUnit: () => {}});\r\n\r\nexport const SiteSettingsProvider: React.FC = (props) => {\r\n    const [_unit, _setUnit] = useState<string>('C');\r\n\r\n    return (\r\n        <SiteSettingsContext.Provider value={{unit: _unit as ContextType[\"unit\"], setUnit: _setUnit}}>\r\n            {props.children}\r\n        </SiteSettingsContext.Provider>\r\n    );\r\n}","import React, {useContext} from \"react\";\r\nimport styles from \"./CurrentConditions.module.sass\";\r\nimport {\r\n   getImageFromNumber as getImage,\r\n   dateFormatConverter as getDate, } from \"../../utils\";\r\nimport {SiteSettingsContext} from '../../SiteSettingsContext';\r\n\r\ntype props = {\r\n  location: string;\r\n  dateTime: string;\r\n  weatherIcon: number;\r\n  temp: {C: number, F: number};\r\n  weatherText: string;\r\n};\r\n\r\nconst CurrentConditons: React.FunctionComponent<props> = (props) => {\r\n  const { location, dateTime, weatherIcon, temp, weatherText } = props;\r\n\r\n  const settings = useContext(SiteSettingsContext);\r\n\r\n  return (\r\n    <div className={styles.root}>\r\n      <div className={styles.location}>\r\n        <i className=\"fas fa-map-marker-alt\"></i>\r\n        <span>{location}</span>\r\n      </div>\r\n      <span style={{margin: '5px auto'}}>{getDate(dateTime)}</span>\r\n      <div className={styles.weather}>\r\n        <div className={styles.icon}>\r\n          <img src={getImage(weatherIcon)} alt=\"weather\"></img>\r\n        </div>\r\n        <div className={styles.temp}>\r\n          <span>{temp[settings.unit]}</span>\r\n          <span>{settings.unit}</span>\r\n        </div>\r\n      </div>\r\n      <span className={styles.weatherText}>{weatherText}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CurrentConditons;\r\n","import React from \"react\";\r\nimport styles from './ShowForecastBtn.module.sass';\r\n\r\ntype Props = {\r\n    onClick: (event: React.MouseEvent<HTMLDivElement>) => void,\r\n    isClicked: boolean\r\n}\r\n\r\nconst ShowForecastBtn: React.FunctionComponent<Props> = (props) =>  (\r\n        <div className={styles.root} onClick={props.onClick}>\r\n            {props.isClicked\r\n            ?<>\r\n                <span>Show less</span>\r\n                <i className=\"fas fa-angle-up\"></i>\r\n            </>\r\n            :<>\r\n                <span>Show more</span>\r\n                <i className=\"fas fa-angle-down\"></i>\r\n            </>}\r\n        </div>\r\n    );\r\n\r\nexport default ShowForecastBtn;\r\n","import React, {useContext} from \"react\";\r\nimport styles from './UnitSwitcherBtn.module.sass';\r\nimport {SiteSettingsContext} from '../../SiteSettingsContext';\r\n\r\n\r\nconst UnitSwitcherBtn: React.FunctionComponent<{}> = () => {\r\n    const settings = useContext(SiteSettingsContext);\r\n\r\n    const handleBtnClick = () => {\r\n        settings.setUnit(prev => prev === 'C' ? 'F' : 'C')\r\n    }\r\n\r\n    return (\r\n        <button className={styles.root} onClick={handleBtnClick}>\r\n            {settings.unit}\r\n        </button>  \r\n    );\r\n}\r\n\r\nexport default UnitSwitcherBtn;\r\n","import * as testData from './mock-data';\r\nimport _axios from 'axios';\r\nimport {isDevelopment} from './utils';\r\n\r\nconst axios = _axios.create({\r\n    baseURL: 'https://dataservice.accuweather.com/',\r\n    timeout: 1000,\r\n});\r\n\r\nconst KEY = 'iy69nL79xqwfKRXQvTGiiwgeFP3SCr7l';\r\n\r\nexport function getCurrentCondition(onsuccess: (data: any) => void): any {\r\n    if(!isDevelopment()) {\r\n        axios.get('currentconditions/v1/16890', {\r\n            params: {\r\n                apikey: KEY,\r\n                language: 'en-us',\r\n                details: 'en-us'\r\n            }\r\n        }).then(res => {\r\n            onsuccess(res.data);\r\n        })\r\n    } else {\r\n        console.log('Setting development data...')\r\n        setTimeout(() => {\r\n            onsuccess(testData.currentConditions);\r\n        }, 500)\r\n    }\r\n}\r\n\r\nexport function getForecast(unit: 'C' | 'F', onsuccess: (data: any) => void): any {\r\n    if(!isDevelopment()) {\r\n        axios.get('forecasts/v1/daily/5day/16890', {\r\n        params: {\r\n            apikey: KEY,\r\n            language: 'en-us',\r\n            details: 'false',\r\n            metric: unit === 'C'\r\n        }\r\n        }).then(res => {\r\n            onsuccess(res.data);\r\n        })\r\n    } else {\r\n        console.log('Setting development data...')\r\n        setTimeout(() => {\r\n            onsuccess(unit === 'C'? testData.foreCast5DayC: testData.foreCast5DayF);\r\n        }, 500)\r\n    }\r\n}","import {useState, useEffect} from 'react';\r\nimport {getForecast} from '../api';\r\n\r\n\r\nconst useGetForecastService = (unit: 'C' | 'F') => {\r\n    type Result = {\r\n        status: 'loaded' | 'loading' | 'error',\r\n        payload: any\r\n    }\r\n\r\n    const [result, setResult] = useState<Result>({status: 'loading', payload: {}})\r\n\r\n    useEffect(()=>{\r\n        getForecast(unit, (res) => {\r\n            setResult({status: \"loaded\", payload: res});\r\n        })\r\n    },[unit])\r\n\r\n    return result;\r\n}\r\n\r\nexport default useGetForecastService;","import React from 'react';\r\nimport styles from './ForecastCard.module.sass';\r\nimport {\r\n  getImageFromNumber as getImage,\r\n  dateFormatConverter as getDate,\r\n} from '../../utils';\r\n\r\ntype props = {\r\n  date: string;\r\n  minTemp: number;\r\n  maxTemp: number;\r\n  unit: 'C' | 'F';\r\n  nightIcon: number;\r\n  dayIcon: number;\r\n};\r\n\r\nconst ForecastCard: React.FunctionComponent<props> = (props) => {\r\n  const { date, minTemp, maxTemp, unit, dayIcon, nightIcon } = props;\r\n\r\n  return (\r\n    <div className={styles.root}>\r\n      <span className={styles.date}>{getDate(date).slice(0, 10)}</span>\r\n      <div className={styles.cols}>\r\n        <div className={styles.col}>\r\n          <span>Night</span>\r\n          <div className={styles.weatherIcon}>\r\n            <img src={getImage(nightIcon)}  alt=\"weather\"/>\r\n          </div>\r\n          <span className={styles.temp}>{`${minTemp} ${unit}`}</span>\r\n        </div>\r\n        <div className={styles.col}>\r\n          <span>Day</span>\r\n          <div className={styles.weatherIcon}>\r\n            <img src={getImage(dayIcon)} alt=\"weather\" />\r\n          </div>\r\n          <span className={styles.temp}>{`${maxTemp} ${unit}`}</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ForecastCard;\r\n","import React, {useContext} from \"react\";\nimport styles from \"./Forecast.module.sass\";\nimport useGetForecastService from \"../../hooks/useGetForecastService\";\nimport ForecastCard from \"../ForecastCard\";\nimport {SiteSettingsContext} from '../../SiteSettingsContext';\n\nconst Forecast: React.FunctionComponent<{}> = () => {\n  const settings = useContext(SiteSettingsContext);\n  const service = useGetForecastService(settings.unit);\n\n  return (\n    <div className={styles.root}>\n      {service.status === \"loaded\" ? (\n        <>\n          <span>{service.payload.Headline.Text}</span>\n          <div className={styles.forecastList}>\n            {service.payload.DailyForecasts.map((forecast: any, i: number) => (\n              <ForecastCard\n                key={i}\n                date={forecast.Date}\n                minTemp={forecast.Temperature.Minimum.Value}\n                maxTemp={forecast.Temperature.Maximum.Value}\n                unit={forecast.Temperature.Minimum.Unit}\n                nightIcon={forecast.Night.Icon}\n                dayIcon={forecast.Day.Icon}\n              />\n            ))}\n          </div>\n        </>\n      ) : (\n        <span>Loading...</span>\n      )}\n    </div>\n  );\n};\n\nexport default Forecast;\n","import React, {useState, useEffect} from 'react';\nimport CurrentCondition from './components/CurrentConditions';\nimport ShowForecastBtn from './components/ShowForecastBtn';\nimport UnitSwitcherBtn from './components/UnitSwitcherBtn';\nimport Forecast from './components/Forecast';\nimport {getCurrentCondition} from './api'\n\nfunction App() {\n    const [isShowForcastClicked, setIsShowForcastClicked] = useState<boolean>(false);\n    const [currentCondition, setCurrentCondition] = useState<{isLoaded: boolean, res: Array<any>}>({isLoaded: false, res: []});\n    const data = currentCondition.isLoaded? currentCondition.res[0]: {};\n\n    const handleShowForcastClick = () => {\n        setIsShowForcastClicked(prevState => !prevState)\n    }\n\n    useEffect(() => {\n        getCurrentCondition((res) => {\n            setCurrentCondition({isLoaded: true, res})\n        })\n    }, [])\n    \n    return (\n        <>\n            <UnitSwitcherBtn/>\n            {currentCondition.isLoaded\n            ?<CurrentCondition\n                location=\"Armenia, Yerevan\"\n                dateTime={data.LocalObservationDateTime}\n                weatherIcon={data.WeatherIcon}\n                temp={{C: data.Temperature.Metric.Value, F: data.Temperature.Imperial.Value}}\n                weatherText={data.WeatherText}\n            />\n            :<span>Loading...</span>}\n            <ShowForecastBtn \n                isClicked={isShowForcastClicked}\n                onClick={handleShowForcastClick}\n             />\n            {isShowForcastClicked &&\n            <Forecast/>}\n        </>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './main.sass';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {SiteSettingsProvider} from './SiteSettingsContext';\n\nReactDOM.render(\n  <React.StrictMode>\n    <SiteSettingsProvider>\n      <App />\n    </SiteSettingsProvider>    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Forecast_root__2ofQg\",\"forecastList\":\"Forecast_forecastList__3KT1y\"};"],"sourceRoot":""}