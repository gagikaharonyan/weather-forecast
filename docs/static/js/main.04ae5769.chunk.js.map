{"version":3,"sources":["components/ShowForecastBtn/ShowForecastBtn.module.sass","components/ButtonBar/ButtonBar.module.sass","components/UnitSwitcherBtn/UnitSwitcherBtn.module.sass","components/ThemeSwitcherBtn/ThemeSwitcherBtn.module.sass","components/ForecastCard/ForecastCard.module.sass","components/CurrentConditions/CurrentConditions.module.sass","utils.ts","AppSettingsContext.tsx","hocs/withAppSettings.tsx","components/CurrentConditions/CurrentConditions.tsx","components/ShowForecastBtn/ShowForecastBtn.tsx","components/UnitSwitcherBtn/UnitSwitcherBtn.tsx","components/ThemeSwitcherBtn/ThemeSwitcherBtn.tsx","components/ButtonBar/ButtonBar.tsx","api.ts","hooks/useGetForecastService.ts","components/ForecastCard/ForecastCard.tsx","components/Forecast/Forecast.tsx","App.tsx","serviceWorker.ts","index.tsx","components/Forecast/Forecast.module.sass"],"names":["module","exports","getImageFromNumber","iconNumber","dateFormatConverter","date","Date","toString","AppSettingsContext","createContext","unit","setUnit","theme","setTheme","AppSettingsProvider","props","useState","_unit","_setUnit","window","localStorage","getItem","_theme","_setTheme","values","useEffect","setItem","Provider","value","children","withAppSettings","Component","settings","useContext","appSettings","location","dateTime","weatherIcon","temp","weatherText","className","styles","root","style","margin","getDate","weather","icon","src","getImage","alt","ShowForecastBtn","onClick","isClicked","prev","ButtonBar","axios","_axios","create","baseURL","timeout","KEY","useGetForecastService","status","payload","result","setResult","onsuccess","get","params","apikey","language","details","metric","then","res","data","getForecast","ForecastCard","minTemp","maxTemp","dayIcon","nightIcon","slice","cols","col","service","Headline","Text","forecastList","DailyForecasts","map","forecast","i","key","Temperature","Minimum","Value","Maximum","Unit","Night","Icon","Day","isShowForcastClicked","setIsShowForcastClicked","isLoaded","currentCondition","setCurrentCondition","document","body","classList","add","remove","LocalObservationDateTime","WeatherIcon","C","Metric","F","Imperial","WeatherText","prevState","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oGACAA,EAAOC,QAAU,CAAC,KAAO,gC,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,0B,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,gC,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,iC,kBCAzBD,EAAOC,QAAU,CAAC,KAAO,2BAA2B,KAAO,2BAA2B,IAAM,0BAA0B,YAAc,kCAAkC,KAAO,6B,2ECA7KD,EAAOC,QAAU,CAAC,KAAO,gCAAgC,SAAW,oCAAoC,QAAU,mCAAmC,KAAO,gCAAgC,KAAO,gCAAgC,YAAc,yC,2GCD1O,SAASC,EAAmBC,GACjC,OAAIA,EAAa,EACR,+DAELA,EAAa,GAAKA,EAAa,GAC1B,+DAELA,EAAa,IAAMA,EAAa,GAC3B,mEAELA,EAAa,GACR,mEAGF,+DAGF,SAASC,EAAoBC,GAClC,OAAO,IAAIC,KAAKD,GAAME,WCTjB,IAAMC,EAAqBC,wBAA2B,CACzDC,KAAM,IAAKC,QAAS,aACpBC,MAAO,QAASC,SAAU,eAGjBC,EAAgC,SAACC,GAAW,IAAD,IAC1BC,mBAAiB,KADS,mBAC7CC,EAD6C,KACtCC,EADsC,OAExBF,mBAAQ,UAASG,OAAOC,aAAaC,QAAQ,gBAArC,QAAgD,SAFhC,mBAE7CC,EAF6C,KAErCC,EAFqC,KAG9CC,EAAS,CACXd,KAAMO,EACNL,MAAOU,EACPX,QAASO,EACTL,SAAUU,GAOd,OAJAE,qBAAU,WACNN,OAAOC,aAAaM,QAAQ,QAASJ,KACtC,CAACA,IAGA,kBAACd,EAAmBmB,SAApB,CAA6BC,MAAOJ,GAC/BT,EAAMc,WCnBJC,EARS,SAAmBC,GACvC,OAAO,SAAChB,GACJ,IAAMiB,EAAWC,qBAAWzB,GAE5B,OAAO,kBAACuB,EAAD,eAAWG,YAAaF,GAAcjB,MCkCtCe,KAxB0C,SAACf,GAAW,IAC3DmB,EAAoEnB,EAApEmB,YAAaC,EAAuDpB,EAAvDoB,SAAUC,EAA6CrB,EAA7CqB,SAAUC,EAAmCtB,EAAnCsB,YAAaC,EAAsBvB,EAAtBuB,KAAMC,EAAgBxB,EAAhBwB,YAE5D,OACE,yBAAKC,UAAWC,IAAOC,MACrB,yBAAKF,UAAWC,IAAON,UACrB,uBAAGK,UAAU,0BACb,8BAAOL,IAET,0BAAMQ,MAAO,CAACC,OAAQ,aAAcC,EAAQT,IAC5C,yBAAKI,UAAWC,IAAOK,SACrB,yBAAKN,UAAWC,IAAOM,MACrB,yBAAKC,IAAKC,EAASZ,GAAca,IAAI,aAEvC,yBAAKV,UAAWC,IAAOH,MACrB,8BAAOA,EAAKJ,EAAaxB,OACzB,8BAAOwB,EAAaxB,QAGxB,0BAAM8B,UAAWC,IAAOF,aAAcA,O,iBCd7BY,EAdyC,SAACpC,GAAD,OAChD,yBAAKyB,UAAWC,IAAOC,KAAMU,QAASrC,EAAMqC,SACvCrC,EAAMsC,UACN,oCACG,2CACA,uBAAGb,UAAU,qBAEhB,oCACG,2CACA,uBAAGA,UAAU,yB,kCCEdV,KAb+D,SAAC,GAAmB,IAAlBI,EAAiB,EAAjBA,YAM5E,OACI,4BAAQM,UAAWC,IAAOC,KAAMU,QALb,WACnBlB,EAAavB,SAAQ,SAAA2C,GAAI,MAAa,MAATA,EAAe,IAAM,SAKtB,MAAvBpB,EAAaxB,KAAgB,IAAM,Q,iBCOjCoB,KAfgE,SAAC,GAAmB,IAAlBI,EAAiB,EAAjBA,YAM7E,OACI,4BAAQM,UAAWC,IAAOC,KAAMU,QALb,WACnBlB,EAAarB,UAAS,SAAAyC,GAAI,MAAa,UAATA,EAAmB,OAAS,aAK7B,SAAxBpB,EAAatB,MACZ,uBAAG4B,UAAU,eACb,uBAAGA,UAAU,oBCDZe,EAT4B,WACvC,OACI,yBAAKf,UAAWC,IAAOC,MACnB,kBAAC,EAAD,MACA,kBAAC,EAAD,Q,wBCNNc,E,OAAQC,EAAOC,OAAO,CACxBC,QAAS,uCACTC,QAAS,MAGPC,EAAM,mCCLZ,IAiBeC,EAjBe,SAACpD,GAAqB,IAAD,EAMnBM,mBAAiB,CAAC+C,OAAQ,UAAWC,QAAS,KAN3B,mBAMxCC,EANwC,KAMhCC,EANgC,KAc/C,OANAzC,qBAAU,YDkBP,SAAqBf,EAAiByD,GAErCX,EAAMY,IAAI,gCAAiC,CAC3CC,OAAQ,CACJC,OAAQT,EACRU,SAAU,QACVC,QAAS,QACTC,OAAiB,MAAT/D,KAETgE,MAAK,SAAAC,GACJR,EAAUQ,EAAIC,SC3BlBC,CAAYnE,GAAM,SAACiE,GACfT,EAAU,CAACH,OAAQ,SAAUC,QAASW,SAE5C,CAACjE,IAEIuD,G,gBCwBIa,EA1BsC,SAAC/D,GAAW,IACvDV,EAAqDU,EAArDV,KAAM0E,EAA+ChE,EAA/CgE,QAASC,EAAsCjE,EAAtCiE,QAAStE,EAA6BK,EAA7BL,KAAMuE,EAAuBlE,EAAvBkE,QAASC,EAAcnE,EAAdmE,UAE/C,OACE,yBAAK1C,UAAWC,IAAOC,MACrB,0BAAMF,UAAWC,IAAOpC,MAAOwC,EAAQxC,GAAM8E,MAAM,EAAG,KACtD,yBAAK3C,UAAWC,IAAO2C,MACrB,yBAAK5C,UAAWC,IAAO4C,KACrB,uCACA,yBAAK7C,UAAWC,IAAOJ,aACrB,yBAAKW,IAAKC,EAASiC,GAAahC,IAAI,aAEtC,0BAAMV,UAAWC,IAAOH,MAAxB,UAAkCyC,EAAlC,YAA6CrE,KAE/C,yBAAK8B,UAAWC,IAAO4C,KACrB,qCACA,yBAAK7C,UAAWC,IAAOJ,aACrB,yBAAKW,IAAKC,EAASgC,GAAU/B,IAAI,aAEnC,0BAAMV,UAAWC,IAAOH,MAAxB,UAAkC0C,EAAlC,YAA6CtE,QCCxCoB,KA7BwD,SAACf,GACtE,IAAMuE,EAAUxB,EAAsB/C,EAAMmB,YAAaxB,MAEzD,OACE,yBAAK8B,UAAWC,IAAOC,MACD,WAAnB4C,EAAQvB,OACP,oCACE,8BAAOuB,EAAQtB,QAAQuB,SAASC,MAChC,yBAAKhD,UAAWC,IAAOgD,cACpBH,EAAQtB,QAAQ0B,eAAeC,KAAI,SAACC,EAAeC,GAAhB,OAClC,kBAAC,EAAD,CACEC,IAAKD,EACLxF,KAAMuF,EAAStF,KACfyE,QAASa,EAASG,YAAYC,QAAQC,MACtCjB,QAASY,EAASG,YAAYG,QAAQD,MACtCvF,KAAMkF,EAASG,YAAYC,QAAQG,KACnCjB,UAAWU,EAASQ,MAAMC,KAC1BpB,QAASW,EAASU,IAAID,YAM9B,gDCuBOvE,KA5CuC,SAAC,GAAmB,IAAlBI,EAAiB,EAAjBA,YAAiB,EACblB,oBAAkB,GADL,mBAC9DuF,EAD8D,KACxCC,EADwC,OAErBxF,mBAA+C,CAACyF,UAAU,EAAO9B,IAAK,KAFjD,mBAE9D+B,EAF8D,KAE5CC,EAF4C,KAG/D/B,EAAO8B,EAAiBD,SAAUC,EAAiB/B,IAAI,GAAI,GAEvC,UAAZ,OAAXzC,QAAW,IAAXA,OAAA,EAAAA,EAAatB,OACZgG,SAASC,KAAKC,UAAUC,IAAI,cAE5BH,SAASC,KAAKC,UAAUE,OAAO,cAcnC,OANAvF,qBAAU,WJdP,IAA6B0C,IIeR,SAACQ,GACjBgC,EAAoB,CAACF,UAAU,EAAM9B,SJdzCnB,EAAMY,IAAI,6BAA8B,CACpCC,OAAQ,CACJC,OAAQT,EACRU,SAAU,QACVC,QAAS,WAEdE,MAAK,SAAAC,GACJR,EAAUQ,EAAIC,WISnB,IAGC,oCACI,kBAAC,EAAD,MACC8B,EAAiBD,SACjB,kBAAC,EAAD,CACGtE,SAAS,mBACTC,SAAUwC,EAAKqC,yBACf5E,YAAauC,EAAKsC,YAClB5E,KAAM,CAAC6E,EAAGvC,EAAKmB,YAAYqB,OAAOnB,MAAOoB,EAAGzC,EAAKmB,YAAYuB,SAASrB,OACtE1D,YAAaqC,EAAK2C,cAErB,4CACD,kBAAC,EAAD,CACIlE,UAAWkD,EACXnD,QAxBmB,WAC3BoD,GAAwB,SAAAgB,GAAS,OAAKA,QAyBjCjB,GACD,kBAAC,EAAD,UCpCQkB,QACW,cAA7BtG,OAAOgB,SAASuF,UAEe,UAA7BvG,OAAOgB,SAASuF,UAEhBvG,OAAOgB,SAASuF,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,KACI,kBAAC,EAAD,QAGNlB,SAASmB,eAAe,SD8HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxD,MAAK,SAAAyD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEhJ5BxI,EAAOC,QAAU,CAAC,KAAO,uBAAuB,aAAe,kC","file":"static/js/main.04ae5769.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"ShowForecastBtn_root__2bLsm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"ButtonBar_root__2pbx_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"UnitSwitcherBtn_root__2yBt3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"ThemeSwitcherBtn_root__3XbWS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"ForecastCard_root__3KQqi\",\"cols\":\"ForecastCard_cols__3tvyt\",\"col\":\"ForecastCard_col__1R6IZ\",\"weatherIcon\":\"ForecastCard_weatherIcon__WgCE3\",\"temp\":\"ForecastCard_temp__1ycGi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"CurrentConditions_root__EE9Kg\",\"location\":\"CurrentConditions_location__2vKV0\",\"weather\":\"CurrentConditions_weather__3U6Yy\",\"icon\":\"CurrentConditions_icon__1MmRe\",\"temp\":\"CurrentConditions_temp__1g-s2\",\"weatherText\":\"CurrentConditions_weatherText__2Khg6\"};","export function getImageFromNumber(iconNumber: number): string {\r\n  if (iconNumber < 6) {\r\n    return \"https://www.flaticon.com/svg/static/icons/svg/869/869869.svg\";\r\n  }\r\n  if (iconNumber > 5 && iconNumber < 29) {\r\n    return \"https://www.flaticon.com/svg/static/icons/svg/925/925647.svg\";\r\n  }\r\n  if (iconNumber > 32 && iconNumber < 38) {\r\n    return \"https://www.flaticon.com/premium-icon/icons/svg/2987/2987960.svg\";\r\n  }\r\n  if (iconNumber > 37) {\r\n    return \"https://www.flaticon.com/premium-icon/icons/svg/1207/1207640.svg\";\r\n  }\r\n\r\n  return \"https://www.flaticon.com/svg/static/icons/svg/990/990388.svg\";\r\n}\r\n\r\nexport function dateFormatConverter(date: string): string {\r\n  return new Date(date).toString();\r\n}\r\n\r\nexport function isDevelopment(): boolean {\r\n  return process.env.NODE_ENV === 'development';\r\n}\r\n","import React, {useState, createContext, useEffect} from 'react';\r\n\r\nexport type ContextType = {\r\n    unit: 'C' | 'F'\r\n    theme: 'DARK' | 'LIGHT'\r\n    setUnit: React.Dispatch<React.SetStateAction<string>>\r\n    setTheme: React.Dispatch<React.SetStateAction<string>>\r\n}\r\n    \r\nexport const AppSettingsContext = createContext<ContextType>({\r\n    unit: 'C', setUnit: () => {},\r\n    theme: 'LIGHT', setTheme: () => {}\r\n});\r\n\r\nexport const AppSettingsProvider: React.FC = (props) => {\r\n    const [_unit, _setUnit] = useState<string>('C');\r\n    const [_theme, _setTheme] = useState<string>(window.localStorage.getItem('Theme')?? 'LIGHT');\r\n    const values = {\r\n        unit: _unit as ContextType['unit'],\r\n        theme: _theme as ContextType['theme'],\r\n        setUnit: _setUnit,\r\n        setTheme: _setTheme\r\n    }\r\n\r\n    useEffect(()=> {\r\n        window.localStorage.setItem('Theme', _theme);\r\n    }, [_theme])\r\n\r\n    return (\r\n        <AppSettingsContext.Provider value={values}>\r\n            {props.children}\r\n        </AppSettingsContext.Provider>\r\n    );\r\n}","import React, {useContext}  from 'react';\r\nimport {AppSettingsContext} from '../AppSettingsContext';\r\n\r\nconst withAppSettings = <T extends object>(Component: React.FC<T>):React.FC<T> => {\r\n    return (props) => {\r\n        const settings = useContext(AppSettingsContext);\r\n\r\n        return <Component appSettings={settings} {...props}/>\r\n    }\r\n}\r\n\r\nexport default withAppSettings;","import React from \"react\";\r\nimport styles from \"./CurrentConditions.module.sass\";\r\nimport {\r\n   getImageFromNumber as getImage,\r\n   dateFormatConverter as getDate, } from \"../../utils\";\r\nimport {ContextType as appSettings} from '../../AppSettingsContext';\r\nimport withAppSettings from '../../hocs/withAppSettings'\r\n\r\ntype props = {\r\n  location: string;\r\n  dateTime: string;\r\n  weatherIcon: number;\r\n  temp: {C: number, F: number};\r\n  weatherText: string;\r\n  appSettings?: appSettings | undefined;\r\n};\r\n\r\nconst CurrentConditons: React.FunctionComponent<props> = (props) => {\r\n  const { appSettings, location, dateTime, weatherIcon, temp, weatherText } = props;\r\n\r\n  return (\r\n    <div className={styles.root}>\r\n      <div className={styles.location}>\r\n        <i className=\"fas fa-map-marker-alt\"></i>\r\n        <span>{location}</span>\r\n      </div>\r\n      <span style={{margin: '5px auto'}}>{getDate(dateTime)}</span>\r\n      <div className={styles.weather}>\r\n        <div className={styles.icon}>\r\n          <img src={getImage(weatherIcon)} alt=\"weather\"></img>\r\n        </div>\r\n        <div className={styles.temp}>\r\n          <span>{temp[appSettings!.unit]}</span>\r\n          <span>{appSettings!.unit}</span>\r\n        </div>\r\n      </div>\r\n      <span className={styles.weatherText}>{weatherText}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withAppSettings<props>(CurrentConditons);\r\n","import React from \"react\";\r\nimport styles from './ShowForecastBtn.module.sass';\r\n\r\ntype Props = {\r\n    onClick: (event: React.MouseEvent<HTMLDivElement>) => void,\r\n    isClicked: boolean\r\n}\r\n\r\nconst ShowForecastBtn: React.FunctionComponent<Props> = (props) =>  (\r\n        <div className={styles.root} onClick={props.onClick}>\r\n            {props.isClicked\r\n            ?<>\r\n                <span>Show less</span>\r\n                <i className=\"fas fa-angle-up\"></i>\r\n            </>\r\n            :<>\r\n                <span>Show more</span>\r\n                <i className=\"fas fa-angle-down\"></i>\r\n            </>}\r\n        </div>\r\n    );\r\n\r\nexport default ShowForecastBtn;\r\n","import React  from \"react\";\r\nimport styles from './UnitSwitcherBtn.module.sass';\r\nimport {ContextType} from '../../AppSettingsContext';\r\nimport withAppSettings from '../../hocs/withAppSettings';\r\n\r\n\r\nconst UnitSwitcherBtn: React.FunctionComponent<{appSettings?: ContextType}> = ({appSettings}) => {\r\n\r\n    const handleBtnClick = () => {\r\n        appSettings!.setUnit(prev => prev === 'C' ? 'F' : 'C')\r\n    }\r\n\r\n    return (\r\n        <button className={styles.root} onClick={handleBtnClick}>\r\n            {appSettings!.unit  === 'C' ? 'F' : 'C'}\r\n        </button>  \r\n    );\r\n}\r\n\r\nexport default withAppSettings(UnitSwitcherBtn);\r\n","import React  from \"react\";\r\nimport styles from './ThemeSwitcherBtn.module.sass';\r\nimport {ContextType} from '../../AppSettingsContext';\r\nimport withAppSettings from '../../hocs/withAppSettings';\r\n\r\n\r\nconst ThemeSwitcherBtn: React.FunctionComponent<{appSettings?: ContextType}> = ({appSettings}) => {\r\n\r\n    const handleBtnClick = () => {\r\n        appSettings!.setTheme(prev => prev === 'LIGHT' ? 'DARK' : 'LIGHT')\r\n    }\r\n\r\n    return (\r\n        <button className={styles.root} onClick={handleBtnClick}>\r\n            {appSettings!.theme  === 'DARK' \r\n            ? <i className=\"fas fa-sun\"></i> \r\n            : <i className=\"fas fa-moon\"></i>}\r\n        </button>  \r\n    );\r\n}\r\n\r\nexport default withAppSettings(ThemeSwitcherBtn);\r\n","import React  from \"react\";\r\nimport styles from './ButtonBar.module.sass';\r\nimport UnitsSwitchBtn from '../UnitSwitcherBtn';\r\nimport ThemeSwitchBtn from '../ThemeSwitcherBtn';\r\n\r\n\r\nconst ButtonBar: React.FunctionComponent = () => {\r\n    return (\r\n        <div className={styles.root}>\r\n            <ThemeSwitchBtn/>\r\n            <UnitsSwitchBtn/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ButtonBar;\r\n","import * as testData from './mock-data';\r\nimport _axios from 'axios';\r\nimport {isDevelopment} from './utils';\r\n\r\nconst axios = _axios.create({\r\n    baseURL: 'https://dataservice.accuweather.com/',\r\n    timeout: 1000,\r\n});\r\n\r\nconst KEY = 'iy69nL79xqwfKRXQvTGiiwgeFP3SCr7l';\r\n\r\nexport function getCurrentCondition(onsuccess: (data: any) => void): any {\r\n    if(!isDevelopment()) {\r\n        axios.get('currentconditions/v1/16890', {\r\n            params: {\r\n                apikey: KEY,\r\n                language: 'en-us',\r\n                details: 'en-us'\r\n            }\r\n        }).then(res => {\r\n            onsuccess(res.data);\r\n        })\r\n    } else {\r\n        console.log('Setting development data...')\r\n        setTimeout(() => {\r\n            onsuccess(testData.currentConditions);\r\n        }, 500)\r\n    }\r\n}\r\n\r\nexport function getForecast(unit: 'C' | 'F', onsuccess: (data: any) => void): any {\r\n    if(!isDevelopment()) {\r\n        axios.get('forecasts/v1/daily/5day/16890', {\r\n        params: {\r\n            apikey: KEY,\r\n            language: 'en-us',\r\n            details: 'false',\r\n            metric: unit === 'C'\r\n        }\r\n        }).then(res => {\r\n            onsuccess(res.data);\r\n        })\r\n    } else {\r\n        console.log('Setting development data...')\r\n        setTimeout(() => {\r\n            onsuccess(unit === 'C'? testData.foreCast5DayC: testData.foreCast5DayF);\r\n        }, 500)\r\n    }\r\n}","import {useState, useEffect} from 'react';\r\nimport {getForecast} from '../api';\r\n\r\n\r\nconst useGetForecastService = (unit: 'C' | 'F') => {\r\n    type Result = {\r\n        status: 'loaded' | 'loading' | 'error',\r\n        payload: any\r\n    }\r\n\r\n    const [result, setResult] = useState<Result>({status: 'loading', payload: {}})\r\n\r\n    useEffect(()=>{\r\n        getForecast(unit, (res) => {\r\n            setResult({status: \"loaded\", payload: res});\r\n        })\r\n    },[unit])\r\n\r\n    return result;\r\n}\r\n\r\nexport default useGetForecastService;","import React from 'react';\r\nimport styles from './ForecastCard.module.sass';\r\nimport {\r\n  getImageFromNumber as getImage,\r\n  dateFormatConverter as getDate,\r\n} from '../../utils';\r\n\r\ntype props = {\r\n  date: string;\r\n  minTemp: number;\r\n  maxTemp: number;\r\n  unit: 'C' | 'F';\r\n  nightIcon: number;\r\n  dayIcon: number;\r\n};\r\n\r\nconst ForecastCard: React.FunctionComponent<props> = (props) => {\r\n  const { date, minTemp, maxTemp, unit, dayIcon, nightIcon } = props;\r\n\r\n  return (\r\n    <div className={styles.root}>\r\n      <span className={styles.date}>{getDate(date).slice(0, 10)}</span>\r\n      <div className={styles.cols}>\r\n        <div className={styles.col}>\r\n          <span>Night</span>\r\n          <div className={styles.weatherIcon}>\r\n            <img src={getImage(nightIcon)}  alt=\"weather\"/>\r\n          </div>\r\n          <span className={styles.temp}>{`${minTemp} ${unit}`}</span>\r\n        </div>\r\n        <div className={styles.col}>\r\n          <span>Day</span>\r\n          <div className={styles.weatherIcon}>\r\n            <img src={getImage(dayIcon)} alt=\"weather\" />\r\n          </div>\r\n          <span className={styles.temp}>{`${maxTemp} ${unit}`}</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ForecastCard;\r\n","import React from \"react\";\nimport styles from \"./Forecast.module.sass\";\nimport useGetForecastService from \"../../hooks/useGetForecastService\";\nimport ForecastCard from \"../ForecastCard\";\nimport {ContextType} from '../../AppSettingsContext';\nimport withAppSettings from '../../hocs/withAppSettings';\n\nconst Forecast: React.FunctionComponent<{appSettings?: ContextType}> = (props) => {\n  const service = useGetForecastService(props.appSettings!.unit);\n\n  return (\n    <div className={styles.root}>\n      {service.status === \"loaded\" ? (\n        <>\n          <span>{service.payload.Headline.Text}</span>\n          <div className={styles.forecastList}>\n            {service.payload.DailyForecasts.map((forecast: any, i: number) => (\n              <ForecastCard\n                key={i}\n                date={forecast.Date}\n                minTemp={forecast.Temperature.Minimum.Value}\n                maxTemp={forecast.Temperature.Maximum.Value}\n                unit={forecast.Temperature.Minimum.Unit}\n                nightIcon={forecast.Night.Icon}\n                dayIcon={forecast.Day.Icon}\n              />\n            ))}\n          </div>\n        </>\n      ) : (\n        <span>Loading...</span>\n      )}\n    </div>\n  );\n};\n\nexport default withAppSettings(Forecast);\n","import React, {useState, useEffect} from 'react';\nimport CurrentCondition from './components/CurrentConditions';\nimport ShowForecastBtn from './components/ShowForecastBtn';\nimport ButtonBar from './components/ButtonBar';\nimport Forecast from './components/Forecast';\nimport {getCurrentCondition} from './api';\nimport withAppSettings from './hocs/withAppSettings';\nimport {ContextType as appSettingsType} from './AppSettingsContext';\n\nconst App:React.FC<{appSettings?: appSettingsType}> = ({appSettings}) => {\n    const [isShowForcastClicked, setIsShowForcastClicked] = useState<boolean>(false);\n    const [currentCondition, setCurrentCondition] = useState<{isLoaded: boolean, res: Array<any>}>({isLoaded: false, res: []});\n    const data = currentCondition.isLoaded? currentCondition.res[0]: {};\n\n    if(appSettings?.theme === 'DARK') {\n        document.body.classList.add('dark-theme');\n    } else {\n        document.body.classList.remove('dark-theme');\n    }\n    \n\n    const handleShowForcastClick = () => {\n        setIsShowForcastClicked(prevState => !prevState)\n    }\n\n    useEffect(() => {\n        getCurrentCondition((res) => {\n            setCurrentCondition({isLoaded: true, res})\n        })\n    }, [])\n    \n    return (\n        <>\n            <ButtonBar/>\n            {currentCondition.isLoaded\n            ?<CurrentCondition\n                location=\"Armenia, Yerevan\"\n                dateTime={data.LocalObservationDateTime}\n                weatherIcon={data.WeatherIcon}\n                temp={{C: data.Temperature.Metric.Value, F: data.Temperature.Imperial.Value}}\n                weatherText={data.WeatherText}\n            />\n            :<span>Loading...</span>}\n            <ShowForecastBtn \n                isClicked={isShowForcastClicked}\n                onClick={handleShowForcastClick}\n             />\n            {isShowForcastClicked &&\n            <Forecast/>}\n        </>\n    );\n}\n\nexport default withAppSettings(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './main.sass';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {AppSettingsProvider} from './AppSettingsContext';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppSettingsProvider>\n        <App/>\n    </AppSettingsProvider>    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Forecast_root__2ofQg\",\"forecastList\":\"Forecast_forecastList__3KT1y\"};"],"sourceRoot":""}